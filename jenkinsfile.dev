pipeline {

    agent any

    stages {

        stage('Build') {
            steps {
                sh 'mvn clean install package'
            }
        }	
  }
    // post block is executed after all the stages/steps in the pipeline
    post {
        always {
            // notify build results, see https://jenkins.io/blog/2016/07/18/pipline-notifications/
            notifyBuild(currentBuild.result)
        }
        changed {
            echo "build changed"
        }
        aborted {
            echo "build aborted"
        }
        failure {
            echo "build failed"
        }
        success {
            echo "build is success"
        }
        unstable {
            echo "build is unstable"
        }
    }
}

// send global slack notification, but fail silently if this is not possible, i.e. slack integration is not installed
def notifyBuild(String buildStatus) {
  // build status of null means successful
  buildStatus = buildStatus ?: 'SUCCESS'

  if (buildStatus == 'STARTED' || buildStatus == 'CHANGED' || buildStatus == 'UNSTABLE') {
    color = 'YELLOW'
    colorCode = '#DDDD00'
  }
  else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00DD00'
  }
  else {
    // FAILURE or UNSTABLE
    color = 'RED'
    colorCode = '#DD0000'
  }

  def message = "${buildStatus}: Job <${env.BUILD_URL}|${env.JOB_NAME} #${env.BUILD_NUMBER}>"

  /* we could add blame to the slack message ;) but it's visible on the build details anyway
  if (buildStatus == 'FAILURE') {
      def changes_by = sh 'git --no-pager log -1 --format=%an'
      message = "${buildStatus}: Job <${env.BUILD_URL}|${env.JOB_NAME} #${env.BUILD_NUMBER}> caused by ${changes_by}"
  }
  */

  // send gracefully
  try {
      slackSend (color: colorCode, message: "${message}")
  }
  catch (e) {
     echo "failed to send notification: ${e}"
  }
}
